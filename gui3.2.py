import re
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, font
import os
import fitz
from unipdfconv import Unipdfconv
from PIL import Image, ImageTk
import shutil
from watcher import DirectoryWatcher
import datetime

converter = Unipdfconv()
images = []
raw_images = []
selected_file = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
if not os.path.exists("–î–æ–∫—É–º–µ–Ω—Ç—ã"):
    os.makedirs("–î–æ–∫—É–º–µ–Ω—Ç—ã")
os.chdir("–î–æ–∫—É–º–µ–Ω—Ç—ã")
current_directory = os.getcwd()  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
working_file_path = ""
In_work = False
folders = ["–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–§", "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–∫–æ–Ω", "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω", "–£–∫–∞–∑ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –†–§",
           "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§", "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–∫—Ç –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ –∏–ª–∏ –≤–µ–¥–æ–º—Å—Ç–≤–∞"]

npa_hierarchy = {
    "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–§": 1,
    "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–∫–æ–Ω": 2,
    "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω": 3,
    "–£–∫–∞–∑ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –†–§": 4,
    "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§": 5,
    "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–∫—Ç –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ –∏–ª–∏ –≤–µ–¥–æ–º—Å—Ç–≤–∞": 6
}


def get_sort_key(npa):
    return npa_hierarchy.get(npa, float('inf'))  # –ï—Å–ª–∏ –ù–ü–ê –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å


sorted_npa_list = sorted(folders, key=get_sort_key)
folders = [
    f"{get_sort_key(npa)}. {npa}" for npa in sorted_npa_list
]

def update_npa_list():
    global sorted_npa_list



def create_dirs():
    global folders
    cd = os.getcwd()
    for folder in folders:
        if not os.path.exists(os.path.join(cd, folder)):
            os.makedirs(folder)


create_dirs()


def scan_directory(directory=None, element_id=None):
    contents = os.listdir(directory)
    contents.sort(key=lambda x: (os.path.isdir(os.path.join(current_directory, x)), x))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: —Å–Ω–∞—á–∞–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
    contents.sort(key=lambda x: (os.path.isdir(os.path.join(current_directory, x)), x))
    for item in contents:
        item_path = os.path.join(current_directory, item)
        if os.path.isdir(item_path):
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content_listbox.insert(element_id + 1, f"         üìÅ {item}")
        elif item.endswith((".pdf", ".odt", ".rtf", ".docx", ".doc")):
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É —Å –µ–≥–æ –∏–º–µ–Ω–µ–º
            content_listbox.insert(element_id + 1, f"         üìÑ {item}")
    # root.after(0, font_listbox)


def show_directory_contents(directory=None):
    global current_directory

    if directory is not None:
        current_directory = directory

    # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    content_listbox.delete(0, tk.END)

    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    # content_listbox.insert(tk.END, f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_directory}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    contents = os.listdir(current_directory)
    sorted_npa_list = sorted(contents, key=get_sort_key)

    for item in sorted_npa_list:
        item_path = os.path.join(current_directory, item)
        if os.path.isdir(item_path):
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content_listbox.insert(tk.END, f"üìÅ {item}")
        elif item.endswith((".pdf", ".odt", ".rtf", ".docx", ".doc")):
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É —Å –µ–≥–æ –∏–º–µ–Ω–µ–º
            content_listbox.insert(tk.END, f"üìÑ {item}")


def close_folder(el_id):
    while content_listbox.get(el_id + 1).startswith(f"         "):
        content_listbox.delete(el_id + 1)


def user_choose_file():
    global working_file_path
    file_path = filedialog.askopenfilename()
    if not file_path:
        return False
    main_l_file.config(text=f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {os.path.basename(file_path)}')
    main_e_date.focus_set()
    working_file_path = file_path
    main_b_add.config(text="–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", command=add_file)
    root.after(1, lambda: preview_file(file_path))
    # shutil.copy(file_path, os.path.join(path, os.path.basename(file_path)))
    # messagebox.showinfo("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")


invalid_chars = '<>:"/\\|?*'


def validate_number(event=None):
    global last_valid_value_num
    new_value = main_e_number.get()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    if any(char in invalid_chars for char in new_value):
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–í–≤–µ–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {invalid_chars}")
        main_e_number.delete(0, tk.END)  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        main_e_number.insert(0, last_valid_value_num)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if new_value != "–æ —Å–æ–∑–¥–∞–Ω–∏–∏..." and (len(new_value) > 0):
            return True
    else:
        last_valid_value_num = new_value
        if new_value != "–æ —Å–æ–∑–¥–∞–Ω–∏–∏..." and (len(new_value) > 0):
            return True


def validate_name(event=None):
    global last_valid_value
    new_value = main_e_name.get()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    if any(char in invalid_chars for char in new_value):
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–í–≤–µ–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {invalid_chars}")
        main_e_name.delete(0, tk.END)  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        main_e_name.insert(0, last_valid_value)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if new_value != "–û —Å–æ–∑–¥–∞–Ω–∏–∏..." and (len(new_value) > 0):
            return True
    else:
        last_valid_value = new_value
        if new_value != "–û —Å–æ–∑–¥–∞–Ω–∏–∏..." and (len(new_value) > 0):
            return True


def select_file(event):
    global selected_file
    element_id = content_listbox.curselection()[0]
    selected_file = content_listbox.get(element_id)
    if selected_file.startswith("‚ñº"):
        name = content_listbox.get(element_id)
        close_folder(element_id)
        content_listbox.delete(element_id)  # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        content_listbox.insert(element_id, name[1:])
    elif selected_file.startswith("üìÅ"):
        directory = selected_file.split(maxsplit=1)[1]
        name = content_listbox.get(element_id)
        content_listbox.delete(element_id)  # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        content_listbox.insert(element_id, "‚ñº" + name)
        scan_directory(directory, element_id)

    else:
        file_path = get_file_path_from_listbox(element_id)
        preview_file(file_path)


def resize_images(event=None):
    global images, raw_images

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    if images:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ö–æ–ª—Å—Ç–∞
        canvas_width = event.width
        canvas_height = event.height

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images.clear()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        for image in raw_images:
            width, height = canvas_width, int((canvas_width / image.width) * image.height)
            resized_image = image.resize((width, height))
            photo = ImageTk.PhotoImage(resized_image)
            images.append(photo)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ —Ö–æ–ª—Å—Ç–µ
        canvas.delete("all")
        y_offset = 0
        for photo in images:
            canvas.create_image(0, y_offset, anchor=tk.NW, image=photo)
            y_offset += photo.height()
        canvas.config(scrollregion=canvas.bbox("all"))
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤ –Ω–∞—á–∞–ª–æ
        canvas.yview_moveto(0.0)


def preview_file(file_path):
    global images, raw_images, converter  # –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    if not file_path.endswith(".pdf"):
        # main_l_file.config(text="–ò–¥—ë—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
        root.title("–ò–¥—ë—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
        file_path = converter.convert_to_pdf(file_path)
        watcher.add_file_to_info(file_path)
    if os.path.isfile(file_path) and (file_path.endswith(".pdf") or file_path.endswith(".PDF")):
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF —Ñ–∞–π–ª
        doc = fitz.open(file_path)
        root.title("–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
        canvas.delete("all")
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images.clear()
        raw_images.clear()
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF —Ñ–∞–π–ª–∞
        for page_number in range(len(doc)):
            page = doc.load_page(page_number)
            pix = page.get_pixmap()
            image = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
            width, height = canvas.winfo_width(), int((canvas.winfo_width() / image.width) * image.height)
            image = image.resize((width, height))
            raw_images.append(image)
            photo = ImageTk.PhotoImage(image)
            images.append(photo)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–æ–∫

        doc.close()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ —Ö–æ–ª—Å—Ç–µ
        y_offset = 0
        for photo in images:
            canvas.create_image(0, y_offset, anchor=tk.NW, image=photo)
            y_offset += photo.height()
        canvas.config(scrollregion=canvas.bbox("all"))
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤ –Ω–∞—á–∞–ª–æ
        canvas.yview_moveto(0.0)

    else:
        print("–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF —Ñ–∞–π–ª–æ–º –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


def search_files(event=None):
    search_term = []
    date = main_e_date.get().lower()
    number = main_e_number.get().lower()
    name = main_e_name.get().lower()
    dir = combo.get()

    if dir:
        dir = os.path.join(current_directory, dir)
    else:
        dir = current_directory
    if number != "1_1234" and (len(number) > 0):
        search_term.append(number)
    if date != "–¥–¥.–º–º.–≥–≥–≥–≥" and (len(date) > 0):
        search_term.append(date)
    if name != "–æ —Å–æ–∑–¥–∞–Ω–∏–∏..." and (len(name) > 0):
        search_term.append(name)
    if search_term:
        matches = []
        for parent, dirs, files in os.walk(dir):
            for file in files:
                if all(term.lower() in file.lower() for term in search_term):
                    if parent not in matches:
                        matches.append(parent)
                    matches.append(file)

        show_search_results(matches)
    else:
        show_directory_contents()


def show_search_results(matches):
    content_listbox.delete(0, tk.END)
    for item in matches:
        item_path = os.path.join(current_directory, item)
        if os.path.isdir(item_path):
            content_listbox.insert(tk.END, f"‚ñºüìÅ {os.path.split(item)[1]}")
        else:
            content_listbox.insert(tk.END, f"         üìÑ {item}")


def on_mousewheel(event):
    canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")


def show_context_menu(event):
    element_id = content_listbox.curselection()[0]
    selected_file = content_listbox.get(element_id)
    if selected_file.startswith(("üìÑ", "         üìÑ")):
        context_menu.post(event.x_root, event.y_root)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞


def add_file():
    global In_work, working_file_path
    if validate_name() and validate_number() and validate_date():
        extention = os.path.splitext(os.path.basename(working_file_path))[1]
        name = f'{main_e_date.get()} ‚Ññ{main_e_number.get()} {combo.get().split(". ",1)[1]} \'\'{main_e_name.get()}\'\''
        path_to_new_file = os.path.join(os.getcwd(), combo.get(), (name + extention))
        shutil.copy(working_file_path, path_to_new_file)
        watcher.add_file_to_info(path_to_new_file)
        clear_main()
        main_l_file.config(text="–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ!")
        working_file_path = ""
        In_work = False
        show_directory_contents()


def validate_date_format(date_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ –ø–æ–ª–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã."""
    if re.match(r"^(\d{1,2}(\.\d{0,2}(\.\d{0,4})?)?)?$", date_str):
        parts = date_str.split('.')
        if len(parts) > 1:
            if len(parts[0]) > 2 or len(parts[1]) > 2:
                return False
            day = int(parts[0]) if parts[0] else 1
            month = int(parts[1]) if parts[1] else 1
            if not (1 <= day <= 31 and 1 <= month <= 12):
                return False
        if len(parts) == 3 and len(parts[2]) == 4:
            day, month, year = int(parts[0]), int(parts[1]), int(parts[2])
            try:
                datetime.date(year, month, day)
                return True
            except ValueError:
                return False
        return True
    return False


def validate_date(event=None):
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –∫–ª–∞–≤–∏—à–∏."""
    entry_value = main_e_date.get().replace('.', '')
    new_value = ""

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–µ–∫
    for i, char in enumerate(entry_value):
        if i in [2, 4]:  # –ü–æ–∑–∏—Ü–∏–∏, –≥–¥–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–∫–∏
            new_value += "."
        new_value += char

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤ (–¥–¥.–º–º.–≥–≥–≥–≥)
    if len(new_value) > 10:
        new_value = new_value[:10]

    main_e_date.delete(0, tk.END)
    main_e_date.insert(0, new_value)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
    if validate_date_format(new_value):
        main_e_date.config(bg="white")  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        if main_e_date.get() != "–¥–¥.–º–º.–≥–≥–≥–≥":
            return True
    else:
        main_e_date.config(bg="red")  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        return False


def on_new_file(file_path):
    global working_file_path

    def _reject():
        global In_work
        newfile_win.destroy()
        In_work = False

    def _add():
        global In_work, helper_window, working_file_path, folders
        newfile_win.destroy()
        preview_file(file_path)
        parent_dir = os.path.split(os.path.dirname(file_path))[1]
        main_l_file.config(text=f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {os.path.basename(file_path)}')
        working_file_path = file_path
        main_b_add.config(text="–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", command=add_file)
        if parent_dir in folders:
            combo.set(parent_dir)

        """rename(file_path)
        root.wait_window(helper_window)
        dir_path = os.path.abspath(filedialog.askdirectory(initialdir=os.getcwd()))
        shutil.move(working_file_path, os.path.join(dir_path, os.path.basename(working_file_path)))
        watcher.add_file_to_info(os.path.join(dir_path, os.path.basename(working_file_path)))
        messagebox.showinfo("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        In_work = False
        show_directory_contents()"""

    newfile_win = tk.Toplevel(root)
    newfile_win.title("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞")
    name_label = tk.Label(newfile_win, text=f'–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª {os.path.basename(file_path)}')
    name_label.pack(pady=5, padx=10, side=tk.TOP, fill=tk.X)
    name_label = tk.Label(newfile_win, text=f'–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª?')
    name_label.pack(pady=5, padx=10, side=tk.TOP, fill=tk.X)
    btn1 = tk.Button(newfile_win, text="–î–∞", command=_add)
    btn1.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X, expand=True)
    btn2 = tk.Button(newfile_win, text="–ù–µ—Ç", command=_reject)
    btn2.pack(pady=5, padx=10, side=tk.RIGHT, fill=tk.X, expand=True)


def get_file_path_from_listbox(element_id):
    name = content_listbox.get(element_id)
    if name.startswith("üìÑ"):
        path = os.path.join(os.getcwd(), name.split("üìÑ")[1][1:])
    else:
        while not content_listbox.get(element_id).startswith("‚ñº"):
            element_id += -1

        path = os.path.join(os.getcwd(), content_listbox.get(element_id)[2:][1:], name.split("üìÑ")[1][1:])

    return path


def rename_file_from_contex():
    element_id = content_listbox.curselection()[0]
    path = get_file_path_from_listbox(element_id)

    rename(path)


def rename(path_to_file):
    def _on_date_entry_change(event):
        entry_text = user_input1.get()
        if len(entry_text) == 2 or len(entry_text) == 5:
            user_input1.insert(tk.END, '.')

    def _write_to_file(name):
        global working_file_path, helper_window
        new_path_to_file = os.path.join(os.path.dirname(path_to_file), name)

        os.rename(path_to_file, new_path_to_file)
        watcher.add_file_to_info(new_path_to_file)
        working_file_path = new_path_to_file
        win.destroy()
        show_directory_contents()
        helper_window.destroy()
        messagebox.showinfo("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", f'–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {name}')

    pack_name = lambda: f'{combobox.get()} –æ—Ç {user_input1.get()} ‚Ññ{user_input2.get()} \'\'{user_input3.get()}\'\'{os.path.splitext(path_to_file)[1]}'

    win = tk.Toplevel(root)
    win.title("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞")
    options = ["–£–∫–∞–∑ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞", "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞", "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω"]
    combobox = ttk.Combobox(win, values=options)
    combobox.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)

    label_input1 = tk.Label(win, text="–î–∞—Ç–∞:")
    label_input1.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)

    # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –Ω–∞–¥ –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞

    user_input1 = tk.Entry(win)
    user_input1.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)
    user_input1.bind("<KeyRelease>", _on_date_entry_change)

    label_input2 = tk.Label(win, text="–ù–æ–º–µ—Ä:")
    label_input2.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª "#" –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è "–ù–∞–∑–≤–∞–Ω–∏–µ 2"
    user_input2 = tk.Entry(win)
    user_input2.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)

    label_input3 = tk.Label(win, text="–ù–∞–∑–≤–∞–Ω–∏–µ:")
    label_input3.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª "#" –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è "–ù–∞–∑–≤–∞–Ω–∏–µ 2"
    user_input3 = tk.Entry(win)
    user_input3.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.X)
    btn_rename_files = tk.Button(win, text="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª", command=lambda: _write_to_file(pack_name()))
    btn_rename_files.pack(pady=5, padx=10, side=tk.TOP, anchor="ne")
    preview_file(path_to_file)


"""def helper():
    if main_b_add.cget("text") == "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª":
        hint = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
    elif main_e_date.get() == "–¥–¥.–º–º.–≥–≥–≥–≥" or (len(main_e_date.get()) < 10):
        hint = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\"–¥–¥.–º–º.–≥–≥–≥–≥\""
    elif main_e_number.get() == "1_1234" or main_e_name.get() == "–û —Å–æ–∑–¥–∞–Ω–∏–∏...":
        hint = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ –∏–º—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
    elif len(combo.get()) <= 0:
        hint = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
    else:
        hint = "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç"
    main_l_hint.config(text=hint)"""


def file_routine():
    global In_work, helper_window
    if not watcher.file_q.empty() and not In_work:
        In_work = True
        helper_window = tk.Toplevel(root)
        helper_window.withdraw()
        on_new_file(watcher.file_q.get())
    root.after(1000, file_routine)


def add_dir():
    def _create():
        os.mkdir(entrydir.get())
        dir_win.destroy()
        messagebox.showinfo("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏", f'–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ')
        show_directory_contents()

    dir_win = tk.Toplevel(root)
    labeld = tk.Label(dir_win, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏")
    entrydir = tk.Entry(dir_win)
    labeld.pack(pady=5, padx=10, side=tk.TOP, fill=tk.X)
    btn1 = tk.Button(dir_win, text="–°–æ–∑–¥–∞—Ç—å", command=_create)
    btn1.pack(pady=5, padx=10, side=tk.BOTTOM, fill=tk.BOTH, expand=True)
    entrydir.pack(pady=5, padx=10, side=tk.BOTTOM, fill=tk.BOTH, expand=True)


def create_paned():
    paned_window = ttk.PanedWindow(root, orient=tk.HORIZONTAL)
    paned_window.pack(fill=tk.BOTH, expand=True)


def get_folder_options():
    directories = [name for name in os.listdir(os.getcwd()) if os.path.isdir(os.path.join(os.getcwd(), name))]
    directories.append("<<–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –ù–ü–ê>>")
    return directories


def set_placeholder1(event):
    if main_e_date.get() == "":
        main_e_date.config(fg="grey")
        main_e_date.insert(0, "–¥–¥.–º–º.–≥–≥–≥–≥")


def remove_placeholder1(event):
    if main_e_date.get() == "–¥–¥.–º–º.–≥–≥–≥–≥":
        main_e_date.delete(0, tk.END)
        main_e_date.config(fg="black")


def set_placeholder2(event):
    if main_e_number.get() == "":
        main_e_number.config(fg="grey")
        main_e_number.insert(0, "1_1234")


def remove_placeholder2(event):
    if main_e_number.get() == "1_1234":
        main_e_number.delete(0, tk.END)
        main_e_number.config(fg="black")


def set_placeholder3(event):
    if main_e_name.get() == "":
        main_e_name.config(fg="grey")
        main_e_name.insert(0, "–û —Å–æ–∑–¥–∞–Ω–∏–∏...")


def remove_placeholder3(event):
    if main_e_name.get() == "–û —Å–æ–∑–¥–∞–Ω–∏–∏...":
        main_e_name.delete(0, tk.END)
        main_e_name.config(fg="black")


def clear_main():
    main_l_file.config(text="")
    main_e_name.delete(0, tk.END)
    main_e_number.delete(0, tk.END)
    main_e_date.delete(0, tk.END)
    main_e_date.insert(0, "–¥–¥.–º–º.–≥–≥–≥–≥")
    main_e_date.config(fg="grey")
    main_e_number.insert(0, "1_1234")
    main_e_number.config(fg="grey")
    main_e_name.insert(0, "–û —Å–æ–∑–¥–∞–Ω–∏–∏...")
    main_e_name.config(fg="grey")
    main_b_add.config(text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", command=user_choose_file)
    canvas.delete("all")
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images.clear()
    combo.set("")


"""def font_listbox(event=None):
    max_width = content_listbox.winfo_width()
    max_height = content_listbox.winfo_height()

    items = content_listbox.get(0, tk.END)
    max_text_width = 0
    max_text_height = 0

    # Create a font object to measure text
    for size in range(10, 71):  # Try font sizes from 1 to 100
        temp_font = font.Font(family="Helvetica", size=size)
        for item in items:
            text_width = temp_font.measure(item)
            text_height = temp_font.metrics("linespace")
            max_text_width = max(max_text_width, text_width)
            max_text_height = max(max_text_height, text_height)

        if max_text_width > max_width or max_text_height * len(items) > max_height:
            # If the text exceeds the size of the listbox, we stop
            break

    # Set the font to the last fitting size
    final_font_size = max(1, size - 1)
    new_font = ("Helvetica", final_font_size)
    content_listbox.config(font=new_font)
"""


def name_bind(event=None):
    validate_name()
    search_files()


def number_bind(event=None):
    validate_number()
    search_files()


def date_bind(event=None):
    validate_date()
    search_files()


def hint_handler(event, data):
    hints = {"num": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞",
             "name": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
             "date": "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞",
             "combo": "–í—ã–±–µ—Ä–∏—Ç–µ –∫ –∫–∞–∫–æ–º—É –≤–∏–¥—É –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è",
             "listbox": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
             }
    if data in hints:
        main_l_hint.configure(text=hints[data])


def on_select_combo(event=None):
    selected_item = combo.get()
    if selected_item == "<<–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –ù–ü–ê>>":
        create_new_NPA()


def create_new_NPA():
    global npa_hierarchy
    npa_hier = npa_hierarchy

    def _create_listbox():
        for i, item in enumerate(npa_hier):
            listbox.insert(tk.END, f"{i + 1}. {item}")

    def _on_drag_start(event):
        index = listbox.nearest(event.y)
        listbox.selection_clear(0, tk.END)
        listbox.selection_set(index)
        listbox._drag_start_index = index
        listbox._drag_data = listbox.get(index).split(". ", 1)[1]

    def _on_drag_motion(event):
        index = listbox.nearest(event.y)
        if index != listbox._drag_start_index:
            data = listbox.get(index).split(". ", 1)[1]
            listbox.delete(index)
            listbox.insert(listbox._drag_start_index, f"{listbox._drag_start_index + 1}. {data}")
            listbox.delete(index)
            listbox.insert(index, f"{index + 1}. {listbox._drag_data}")
            listbox.selection_set(index)
            listbox._drag_start_index = index
        # _update_item_numbers()

    def _remove_placeholder(event):
        if entry.get() == "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ –ù–ü–ê":
            entry.delete(0, tk.END)
            entry.config(fg="black")

    def _set_placeholder(event):
        if entry.get() == "":
            entry.config(fg="grey")
            entry.insert(0, "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ –ù–ü–ê")

    def _save_npa(event=None):
        global npa_hierarchy
        new_hier= {}
        for element in range(listbox.size()):
            iter1, name = listbox.get(element).split(". ", 1)
            new_hier[name]=int(iter1)
        npa_hierarchy = new_hier
    win = tk.Toplevel(root)
    win.title("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ù–ü–ê")

    listbox = tk.Listbox(win, selectmode="single")
    listbox.pack(side=tk.TOP, fill="both", expand=True)
    help_l = tk.Label(win, text="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏")
    help_l.pack(side=tk.TOP, fill=tk.X, expand=True)
    b1 = tk.Button(win, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=_save_npa)
    b2 = tk.Button(win, text="–û—Ç–º–µ–Ω–∏—Ç—å", command=lambda: win.destroy())
    b3 = tk.Button(win, text="–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç",
                   command=lambda: listbox.insert(tk.END, f"{listbox.size() + 1}. {entry.get()}"))
    b4 = tk.Button(win, text="–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç",
                   command=lambda: listbox.delete(listbox.curselection()[0]))
    b1.pack(side=tk.BOTTOM, fill=tk.X, expand=True)
    b2.pack(side=tk.BOTTOM, fill=tk.X, expand=True)
    b3.pack(side=tk.BOTTOM, fill=tk.X, expand=True)
    b4.pack(side=tk.BOTTOM, fill=tk.X, expand=True)
    entry = tk.Entry(win)
    entry.bind("<FocusIn>", _remove_placeholder)
    entry.bind("<FocusOut>", _set_placeholder)

    entry.pack(side=tk.BOTTOM, fill=tk.X, expand=True)

    entry.insert(0, "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ –ù–ü–ê")
    entry.config(fg="grey")
    _create_listbox()
    listbox.bind("<ButtonPress-1>", _on_drag_start)
    listbox.bind("<B1-Motion>", _on_drag_motion)


root = tk.Tk()
root.title("–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤")
style = ttk.Style(root)
style.theme_use("clam")  # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
style.configure("Treeview", background="#f0f0f0", fieldbackground="#f0f0f0")
style.map("Treeview", background=[('selected', '#347083')])
# root.attributes("-fullscreen", True)

paned_window = ttk.PanedWindow(root, orient=tk.HORIZONTAL)

frame1 = tk.Frame(paned_window, bg="#f0f0f0", bd=1, relief=tk.SUNKEN)
frame1.pack(pady=5, padx=10, side=tk.RIGHT, fill=tk.BOTH, expand=True)
canvas = tk.Canvas(frame1, bg="#f0f0f0")
scrollbar1 = tk.Scrollbar(frame1, orient="vertical", command=canvas.yview)
scrollbar1.pack(side="right", fill="y")
scrollbar2 = tk.Scrollbar(frame1, orient="horizontal", command=canvas.xview)
scrollbar2.pack(side="bottom", fill="x")

canvas.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)
canvas.bind("<MouseWheel>", on_mousewheel)
canvas.config(yscrollcommand=scrollbar1.set, xscrollcommand=scrollbar2.set)

frame2 = tk.Frame(paned_window, bd=1, relief=tk.SUNKEN)
frame2.pack(pady=5, padx=10, side=tk.LEFT, fill=tk.BOTH, expand=True)

content_listbox = tk.Listbox(frame2, xscrollcommand=lambda *args: scrollbar_x.set(*args))
# –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π Scrollbar –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∫ Listbox
scrollbar_x = tk.Scrollbar(frame2, orient=tk.HORIZONTAL, command=content_listbox.xview, bg="blue")
scrollbar_x.grid(row=1, column=0, columnspan=6, sticky="ew")

# –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Scrollbar –∫ Listbox
content_listbox.config(xscrollcommand=scrollbar_x.set)

content_listbox.config(font=font.Font(family="Helvetica", size=14))

content_listbox.grid(row=0, column=0, columnspan=6, sticky="nsew")
content_listbox.bind("<Double-Button-1>", select_file)
content_listbox.bind("<Button-3>", show_context_menu)
content_listbox.bind("<Enter>", lambda event: hint_handler(event, "listbox"))
# content_listbox.bind("<Configure>", font_listbox) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —à—Ä–∏—Ñ—Ç–∞

frame2.grid_rowconfigure(0, weight=400)
frame2.grid_columnconfigure(0, weight=0)

# Labels
main_l_hint = tk.Label(frame2)
main_l_date = tk.Label(frame2, text="–î–∞—Ç–∞ \n –∏–∑–¥–∞–Ω–∏—è")
main_l_number = tk.Label(frame2, text="‚Ññ \n–î–æ–∫—É–º–µ–Ω—Ç–∞")
main_l_name = tk.Label(frame2, text="–ò–º—è \n–¥–æ–∫—É–º–µ–Ω—Ç–∞")
main_l_dir = tk.Label(frame2, text="–ö–∞—Ç–∞–ª–æ–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
main_l_file = tk.Label(frame2)

# Entries
main_e_date = tk.Entry(frame2, name="date")
main_e_number = tk.Entry(frame2, name="num")
main_e_name = tk.Entry(frame2, name="name")

main_e_date.insert(0, "–¥–¥.–º–º.–≥–≥–≥–≥")
main_e_date.config(fg="grey")
main_e_number.insert(0, "1_1234")
main_e_number.config(fg="grey")
main_e_name.insert(0, "–û —Å–æ–∑–¥–∞–Ω–∏–∏...")
main_e_name.config(fg="grey")

main_e_date.bind("<FocusIn>", remove_placeholder1)
main_e_date.bind("<FocusOut>", set_placeholder1)
main_e_number.bind("<FocusIn>", remove_placeholder2)
main_e_number.bind("<FocusOut>", set_placeholder2)
main_e_name.bind("<FocusIn>", remove_placeholder3)
main_e_name.bind("<FocusOut>", set_placeholder3)
main_e_number.bind("<Enter>", lambda event: hint_handler(event, "num"))
main_e_name.bind("<Enter>", lambda event: hint_handler(event, "name"))
main_e_date.bind("<Enter>", lambda event: hint_handler(event, "date"))
"""main_e_date.bind("<KeyRelease>", validate_date)
main_e_name.bind("<KeyRelease>", validate_name)
main_e_number.bind("<KeyRelease>", validate_number)
main_e_number.bind("<KeyRelease>", search_files)
main_e_name.bind("<KeyRelease>", search_files)
main_e_date.bind("<KeyRelease>", search_files)
"""
main_e_number.bind("<KeyRelease>", number_bind)
main_e_name.bind("<KeyRelease>", name_bind)
main_e_date.bind("<KeyRelease>", date_bind)

# Buttons

main_b_add = tk.Button(frame2, text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", command=user_choose_file)
main_b_clear = tk.Button(frame2, text="–û—á–∏—Å—Ç–∏—Ç—å", command=clear_main)

options = get_folder_options()

# –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
selected_option = tk.StringVar()

# –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
combo = ttk.Combobox(frame2, textvariable=selected_option, values=options, state="readonly")
combo.bind("<<ComboboxSelected>>", on_select_combo)
combo.bind("<Enter>", lambda event: hint_handler(event, "combo"))

# Pack to frame
main_l_hint.grid(row=5, column=0, columnspan=6, sticky="nsew")
main_l_date.grid(row=2, column=0)
main_e_date.grid(row=2, column=1)
main_l_number.grid(row=2, column=2)
main_e_number.grid(row=2, column=3)
main_l_name.grid(row=2, column=4)
# main_l_file.grid(row=2, column=0, columnspan=4)
main_e_name.grid(row=2, column=5, sticky="nsew")
main_l_dir.grid(row=3, column=0, sticky="nsew")
main_b_add.grid(row=3, column=5, sticky="nsew")
main_b_clear.grid(row=3, column=4, sticky="nsew")
combo.grid(row=3, column=1, columnspan=3, sticky="nsew")

for n in range(1, 6):
    frame2.grid_columnconfigure(n, weight=1)
    # frame2.grid_rowconfigure(n, weight=1)
# frame2.grid_rowconfigure(1,weight=0)
for n in range(0, 5):
    frame2.grid_columnconfigure(n, weight=1)
frame2.grid_columnconfigure(1, minsize=70)

paned_window.add(frame2)
paned_window.add(frame1)

paned_window.pane(frame1, weight=3)
paned_window.pane(frame2, weight=1)
"""
–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É —ç–∫—Ä–∞–Ω–∞
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

root.geometry(f'{screen_width}x{screen_height - (int(screen_height * 0.1))}+0+0')
"""
root.geometry(f'1400x600+0+0')

context_menu = tk.Menu(root, tearoff=0)
context_menu.add_command(label="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", command=rename_file_from_contex)

show_directory_contents()
helper_window = tk.Toplevel(root)
helper_window.withdraw()
filename = 'directory_listing.pkl'
watcher = DirectoryWatcher(os.path.dirname(os.getcwd()))
watcher.start_watching()
file_routine()
paned_window.pack(fill=tk.BOTH, expand=True)
canvas.bind("<Configure>", resize_images)
create_dirs()
root.mainloop()
